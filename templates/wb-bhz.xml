<templateSet group="wb-bhz">
  <template name="wbrlist" value="import React, { Fragment } from 'react';&#10;import { connect } from 'dva';&#10;import { Table, Input, Popconfirm, Form, Button, Row, Divider, Card } from 'antd';&#10;&#10;const statusTag = (index, text) =&gt; {&#10;  const colors = ['#FAAD14', '#1890FF', '#52C41A'];&#10;  return (&#10;    &lt;div style={{ display: 'inline-block', color: colors[index] }}&gt;&#10;      &lt;div&#10;        style={{&#10;          display: 'inline-block',&#10;          marginRight: '7px',&#10;          width: '8px',&#10;          height: '8px',&#10;          borderRadius: '5px',&#10;          backgroundColor: colors[index],&#10;        }}&#10;      /&gt;&#10;      {text}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;@connect(({ trash, loading }) =&gt; ({&#10;  trash,&#10;  loading: loading.models.trash,&#10;}))&#10;export default class EditableTable extends React.Component {&#10;  constructor(props) {&#10;    super(props);&#10;    this.columns = [&#10;      {&#10;        title: '项目方',&#10;        dataIndex: 'enterpriseName',&#10;      },&#10;      {&#10;        title: '项目名称',&#10;        dataIndex: 'projectName',&#10;      },&#10;      {&#10;        title: '项目状态',&#10;        dataIndex: 'statusName',&#10;        render: (text, record) =&gt; {&#10;          return statusTag(record.status - 1, record.statusName);&#10;        },&#10;      },&#10;      {&#10;        title: '对接部门',&#10;        dataIndex: 'departments',&#10;      },&#10;      {&#10;        title: '提交时间',&#10;        dataIndex: 'modifyTime',&#10;        sorter: true,&#10;      },&#10;      {&#10;        title: '操作',&#10;        dataIndex: 'operation',&#10;        align: 'center',&#10;        render: (text, record) =&gt; {&#10;          return (&#10;            &lt;Fragment&gt;&#10;              &lt;Popconfirm title=&quot;确认删除吗?&quot; onConfirm={() =&gt; this.remove(record.key)}&gt;&#10;                &lt;a style={{ color: '#ff4d4f' }}&gt;删除&lt;/a&gt;&#10;              &lt;/Popconfirm&gt;&#10;              &lt;Divider type=&quot;vertical&quot; /&gt;&#10;              &lt;a onClick={() =&gt; this.revert(record.key)}&gt;恢复&lt;/a&gt;&#10;            &lt;/Fragment&gt;&#10;          );&#10;        },&#10;      },&#10;    ];&#10;    this.params = {&#10;      currentPage: 1,&#10;      pageSize: 10,&#10;    };&#10;  }&#10;&#10;  componentWillMount() {&#10;    const { dispatch } = this.props;&#10;    dispatch({&#10;      type: 'trash/queries',&#10;      callback: this.fetchList,&#10;    });&#10;  }&#10;&#10;  // 执行统一列表查询，搜索的参数统一由this.params管控&#10;  fetchList = () =&gt; {&#10;    const { dispatch } = this.props;&#10;    dispatch({&#10;      type: 'trash/fetch',&#10;      payload: {&#10;        ...this.params,&#10;      },&#10;    });&#10;  };&#10;&#10;  remove = key =&gt; {&#10;    const { dispatch } = this.props;&#10;    dispatch({&#10;      type: 'trash/remove',&#10;      payload: {&#10;        id: key,&#10;      },&#10;      callback: this.fetchList,&#10;    });&#10;  };&#10;&#10;  revert = key =&gt; {&#10;    const { dispatch } = this.props;&#10;    dispatch({&#10;      type: 'trash/revert',&#10;      payload: {&#10;        id: key,&#10;      },&#10;      callback: this.fetchList,&#10;    });&#10;  };&#10;&#10;  removeAll = () =&gt; {&#10;    const { dispatch } = this.props;&#10;    dispatch({&#10;      type: 'trash/removeAll',&#10;      callback: this.fetchList,&#10;    });&#10;  };&#10;&#10;  handleTableChange = (pagination, filters, sorter) =&gt; {&#10;    const { current, pageSize } = pagination;&#10;    this.params = {&#10;      ...this.params,&#10;      currentPage: current,&#10;      pageSize,&#10;    };&#10;    if (sorter.order) {&#10;      this.params.order = sorter.order === 'descend' ? '2' : '1';&#10;    }&#10;    this.fetchList();&#10;  };&#10;&#10;  search = value =&gt; {&#10;    this.params = {&#10;      ...this.params,&#10;      currentPage: 1,&#10;      keywords: value,&#10;    };&#10;    this.fetchList();&#10;  };&#10;&#10;  render() {&#10;    const {&#10;      trash: { listData },&#10;      loading,&#10;    } = this.props;&#10;    const paginationProps = {&#10;      showTotal: (total, range)=&gt; {&#10;        return &lt;span&gt;共 {total} 条&lt;/span&gt;&#10;      },&#10;      ...listData.pagination,&#10;    };&#10;    return (&#10;      &lt;Card&gt;&#10;        &lt;Form layout=&quot;inline&quot; style={{ lineHeight: '45px', paddingBottom: '5px' }}&gt;&#10;          &lt;Row type=&quot;flex&quot; justify=&quot;space-between&quot; align=&quot;bottom&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;Input.Search&#10;                placeholder=&quot;搜索项目方/项目名称&quot;&#10;                onSearch={this.search}&#10;                style={{ width: 300, marginRight: 10 }}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/Row&gt;&#10;          &lt;div&gt;&#10;            &lt;Popconfirm&#10;              title=&quot;确认要清空回收站吗？&quot;&#10;              onConfirm={this.removeAll}&#10;              onCancel={this.cancel}&#10;              okText=&quot;确定&quot;&#10;              cancelText=&quot;取消&quot;&#10;            &gt;&#10;              &lt;Button type=&quot;primary&quot; icon=&quot;plus&quot;&gt;语音转义&lt;/Button&gt;&#10;            &lt;/Popconfirm&gt;&#10;          &lt;/div&gt;&#10;        &lt;/Form&gt;&#10;        &lt;Table&#10;          loading={loading}&#10;          dataSource={listData.list}&#10;          columns={this.columns}&#10;          pagination={paginationProps}&#10;          onChange={this.handleTableChange}&#10;        /&gt;&#10;      &lt;/Card&gt;&#10;    );&#10;  }&#10;}&#10;" description="react后台列表模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="wbrc" value="import React, {PureComponent} from 'react';&#10;&#10;class $ComponentName$ extends PureComponent{&#10;&#10;  render(){&#10;    return (&#10;      &lt;div&gt;&#10;        $END$&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;}&#10;&#10;export default $ComponentName$;&#10;" description="react组件模板" toReformat="false" toShortenFQNames="true">
    <variable name="ComponentName" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="wbrdetail" value="import React, { PureComponent } from 'react';&#10;import {Row, Col, Card} from 'antd';&#10;import PageHeaderLayout from '../../layouts/PageHeaderLayout';&#10;&#10;class Detail extends PureComponent{&#10;&#10;&#10;  render(){&#10;    const breadcrumbList = [&#10;      {&#10;        title: '应用中心',&#10;        href: '/application/mgr'&#10;      },&#10;      {&#10;        title: '智能会议纪要',&#10;        href: '/intelligent_meeting_summary/list'&#10;      },&#10;      {&#10;        title: '详情',&#10;      },&#10;    ];&#10;&#10;&#10;&#10;    return (&#10;      &lt;PageHeaderLayout breadcrumbList={breadcrumbList}&gt;&#10;        &lt;div&gt;&#10;          &lt;Card&gt;&#10;            &lt;Row&gt;&#10;              &lt;Col&gt;&#10;                1&#10;              &lt;/Col&gt;&#10;            &lt;/Row&gt;&#10;          &lt;/Card&gt;&#10;          &lt;Row gutter={20} style={{marginTop: 20}}&gt;&#10;            &lt;Col span={8}&gt;&#10;              &lt;Card&gt;&#10;                1&#10;              &lt;/Card&gt;&#10;            &lt;/Col&gt;&#10;            &lt;Col span={16}&gt;&#10;              &lt;Card&gt;&#10;                1&#10;              &lt;/Card&gt;&#10;            &lt;/Col&gt;&#10;          &lt;/Row&gt;&#10;        &lt;/div&gt;&#10;      &lt;/PageHeaderLayout&gt;&#10;    );&#10;  };&#10;}&#10;&#10;export default Detail;&#10;" description="react详情结构" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>